import org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpack

val kotlinVersion = "1.7.20"
val serializationVersion = "1.3.3"
val ktorVersion = "2.2.2"
val logbackVersion = "1.2.11"
//val kotlinWrappersVersion = "1.0.0-pre.354" // it's only js, so it's redundant here
val kmongoVersion = "4.5.0"

plugins {
    id("io.ktor.plugin") version "2.2.2"
    kotlin("multiplatform")
    kotlin("plugin.serialization")
}

group = "org.example"
version = "1.0-SNAPSHOT"

application {
    mainClass.set("ServerKt")
}

repositories {
    google()
    mavenCentral()
    maven("https://maven.pkg.jetbrains.space/public/p/compose/dev")
}

kotlin {
    // JS redundant here
//    js(IR) {
//        browser {
//            binaries.executable()
//        }
//    }
    jvm {
        withJava()
    }

    sourceSets {
        val jvmMain by getting {
            dependencies {
                implementation(project(":common"))

                implementation("io.ktor:ktor-serialization:$ktorVersion")
                implementation("io.ktor:ktor-server-content-negotiation:$ktorVersion")
                implementation("io.ktor:ktor-serialization-kotlinx-json:$ktorVersion")
                implementation("io.ktor:ktor-server-cors:$ktorVersion")
                implementation("io.ktor:ktor-server-compression:$ktorVersion")
                implementation("io.ktor:ktor-server-core-jvm:$ktorVersion")
                implementation("io.ktor:ktor-server-netty:$ktorVersion")
                implementation("ch.qos.logback:logback-classic:$logbackVersion")
                implementation("org.litote.kmongo:kmongo-coroutine-serialization:$kmongoVersion")
            }
        }
    }
}

tasks {
    withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

application {
    mainClass.set("ServerKt")
}

val copyResourcesTask = tasks.register<Copy>("copyWebResources") {
    dependsOn(":web:jsBrowserDistribution")
    from(project(":web").file("build/distributions/"))
    destinationDir = file("src/jvmMain/resources/web-resources")
}
tasks.getByName("processResources") {
    dependsOn(copyResourcesTask)
}

// Now, it's redundant
//tasks.getByName<Jar>("jvmJar") {
//    val taskName = if (project.hasProperty("isProduction")
//        || project.gradle.startParameter.taskNames.contains("installDist")
//    ) {
//        "jsBrowserProductionWebpack"
//    } else {
//        "jsBrowserDevelopmentWebpack"
//    }
//    println("I'M HERE")
//    val webpackTask = tasks.getByName<KotlinWebpack>(taskName)
//    dependsOn(webpackTask) // make sure JS gets compiled first
//    from(File(webpackTask.destinationDirectory, webpackTask.outputFileName)) // bring output file along into the JAR
//}

//distributions {
//    main {
//        contents {
//            from("$buildDir/libs") {
//                rename("${rootProject.name}-jvm", rootProject.name) //todo strange renaming
//                into("lib")
//            }
//        }
//    }
//}

// Alias "installDist" as "stage" (for cloud providers)
tasks.create("stage") {
    dependsOn(tasks.getByName("installDist"))
}

// Redundant now
//tasks.getByName<JavaExec>("run") {
//    classpath(tasks.getByName<Jar>("jvmJar")) // so that the JS artifacts generated by `jvmJar` can be found and served
//}
